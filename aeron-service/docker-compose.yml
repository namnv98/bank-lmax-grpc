version: '3.8'

networks:
  aeron_net:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.16.0.0/24

volumes:
  archive-storage:

services:
  archive:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "-Daeron.cluster.tutorial.nodeId=0", "-cp", "/app/application.jar"  ,"namnv.archive.HorizonArchive"]
    networks:
      aeron_net:
        ipv4_address: 172.16.0.2
    volumes:
      - type: tmpfs
        target: /dev/shm
    healthcheck:
      test: [ "CMD-SHELL", "ps aux | grep -v grep | grep -q 'HorizonArchive' && echo 'Aeron Archive started' || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
      start_interval: 5s

  node0:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED", "-Daeron.cluster.tutorial.nodeId=0", "-cp", "/app/application.jar"  ,"namnv.cluster.Node"]
    networks:
      aeron_net:
        ipv4_address: 172.16.0.5
    volumes:
      - type: tmpfs
        target: /dev/shm
    depends_on:
      archive:
        condition: service_healthy
        required: true
    healthcheck:
      test: [ "CMD-SHELL", "ps aux | grep -v grep | grep -q 'Node' && echo 'Started Cluster Node' || exit 1" ]
      interval: 5s
      timeout: 3s
      retries: 10
      start_period: 10s
      start_interval: 5s
#  node1:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.nodeId=1", "-cp", "/app/application.jar" ,"namnv.cluster.Node"]
#    networks:
#      aeron_net:
#        ipv4_address: 172.16.0.6
#    volumes:
#      - type: tmpfs
#        target: /dev/shm
#
#
#  node3:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.nodeId=2", "-cp", "/app/application.jar" ,"namnv.cluster.Node"]
#    networks:
#      aeron_net:
#        ipv4_address: 172.16.0.7
#    volumes:
#      - type: tmpfs
#        target: /dev/shm

  producer:
    build:
      context: .
      dockerfile: Dockerfile
    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.customerId=0", "-cp", "/app/application.jar" ,"namnv.producer.Producer"]
    networks:
      aeron_net:
        ipv4_address: 172.16.0.8
    volumes:
      - type: tmpfs
        target: /dev/shm
    depends_on:
      node0:
        condition: service_healthy
        required: true


#  consumer:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.customerId=1", "-cp", "/app/application.jar" ,"namnv.consumer.Consumer"]
#    networks:
#      aeron_net:
#        ipv4_address: 172.16.0.9
#    volumes:
#      - type: tmpfs
#        target: /dev/shm
#    healthcheck:
#      test: [ "CMD-SHELL", "ps aux | grep -v grep | grep -q 'Consumer' && echo 'ingressEndpoints' || exit 1" ]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#      start_period: 10s
#      start_interval: 5s
#    depends_on:
#      node0:
#        condition: service_healthy
#        required: true

#  replayer:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.customerId=1", "-cp", "/app/application.jar" ,"namnv.live.BasicReplayMergeReceiver"]
#    networks:
#      aeron_net:
#        ipv4_address: 172.16.0.10
#    volumes:
#      - type: tmpfs
#        target: /dev/shm
#    depends_on:
#      node0:
#        condition: service_healthy
#        required: true

#  recording:
#    build:
#      context: .
#      dockerfile: Dockerfile
#    command: [ "java", "--add-opens", "java.base/sun.nio.ch=ALL-UNNAMED","-Daeron.cluster.tutorial.customerId=1", "-cp", "/app/application.jar" ,"namnv.producer.RecordingProducer"]
#    networks:
#      aeron_net:
#        ipv4_address: 172.16.0.11
#    volumes:
#      - type: tmpfs
#        target: /dev/shm
#    depends_on:
#      archive:
#        condition: service_healthy
#        required: true
#    healthcheck:
#      test: [ "CMD-SHELL", "ps aux | grep -v grep | grep -q 'RecordingProducer' && echo 'Producer healthy and standing by...' || exit 1" ]
#      interval: 5s
#      timeout: 3s
#      retries: 10
#      start_period: 10s
#      start_interval: 5s
